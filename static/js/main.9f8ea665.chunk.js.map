{"version":3,"sources":["components/header/header.component.js","services/books.service.js","views/home/home.component.js","views/search/search.component.js","components/dashboard/dashboard.component.js","components/footer/footer.component.js","components/card/card.component.js","components/shelf/shelf.component.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","props","title","className","BooksService","api","token","headers","this","localStorage","Math","random","toString","substr","bookId","fetch","then","res","json","data","book","books","shelf","id","method","body","JSON","stringify","query","HomeComponent","bookShelves","moveBook","Object","keys","filter","key","hidden","map","Fragment","shelves","destination","to","SearchComponent","search","onChange","event","target","value","placeholder","onClick","DashboardComponent","state","searchBooks","bookService","loadBooks","getAll","length","setState","addBookShelfInfo","update","searchBook","basename","exact","path","render","bind","Component","FooterComponent","Link","href","useStyles","makeStyles","root","maxWidth","maxHeight","CardComponent","React","useState","anchorEl","setAnchorEl","open","Boolean","classes","authors","imageLink","imageLinks","thumbnail","subTitle","join","options","handleClose","Card","CardHeader","action","IconButton","aria-label","currentTarget","disabled","titleTypographyProps","variant","subheader","subheaderTypographyProps","Menu","keepMounted","onClose","TransitionComponent","Fade","MenuItem","selected","option","handleMove","CardMedia","component","src","theme","width","marginBottom","expanded","paddingTop","minHeight","ShelfComponent","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","aria-controls","Typography","style","textAlign","elevation","ExpansionPanelDetails","Grid","container","spacing","item","xs","sm","md","lg","xl","App","Container","paddingLeft","paddingRight","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f8ea665.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const HeaderComponent = (props) => {\r\n    const {title} = props;\r\n    return (\r\n        <header className=\"header\">\r\n            <h1 className=\"header-title\">{title}</h1>\r\n        </header>\r\n    );\r\n};\r\n","export class BooksService {\r\n\r\n    api = \"https://reactnd-books-api.udacity.com\";\r\n    token = \"\";\r\n    headers = {};\r\n\r\n    constructor() {\r\n        // Generate a unique token for storing your bookshelf data on the backend server.\r\n        this.token = localStorage.token;\r\n        if (!this.token)\r\n            this.token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\n        this.headers = {\r\n            'Accept': 'application/json',\r\n            'Authorization': this.token\r\n        };\r\n    }\r\n\r\n    get(bookId) {\r\n        const {api, headers} = this;\r\n        return fetch(`${api}/books/${bookId}`, headers)\r\n            .then(res => res.json())\r\n            .then(data => data.book);\r\n\r\n    }\r\n\r\n    getAll() {\r\n        const {api, headers} = this;\r\n        return fetch(`${api}/books`, {headers})\r\n            .then(res => res.json())\r\n            .then(data => data.books);\r\n\r\n    }\r\n\r\n    update(book, shelf) {\r\n        const {api, headers} = this;\r\n        return fetch(`${api}/books/${book.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                ...headers,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({shelf})\r\n        }).then(res => res.json());\r\n    }\r\n\r\n    search(query) {\r\n        const {api, headers} = this;\r\n        return fetch(`${api}/search`, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...headers,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({query})\r\n        }).then(res => res.json())\r\n            .then(data => data.books);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {ShelfComponent} from \"../../components\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const HomeComponent = (props) => {\r\n    const {bookShelves, moveBook} = props;\r\n\r\n    return Object.keys(bookShelves).filter((key) => (!bookShelves[key].hidden)).map((key) => {\r\n        const {title, books} = bookShelves[key];\r\n        return (\r\n            <React.Fragment key={key}>\r\n                <ShelfComponent title={title}\r\n                                books={books}\r\n                                shelves={bookShelves}\r\n                                moveBook={(book, destination) => moveBook(book, destination)}\r\n                />\r\n                <Link to=\"/search\" className=\"searchButton\">\r\n                    <i title=\"Search\" className=\"fa fa-search\"/>\r\n                </Link>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n};\r\n\r\n\r\nHomeComponent.propTypes = {\r\n    bookShelves: PropTypes.object.isRequired,\r\n    moveBook: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport {ShelfComponent} from \"../../components\";\r\n\r\nexport const SearchComponent = (props) => {\r\n\r\n    const {books, bookShelves, search, moveBook} = props;\r\n\r\n    return (\r\n        <div className=\"searchView\">\r\n            <input className=\"searchbar\" onChange={(event) => (search(event.target.value))}\r\n                   placeholder=\"Search by title or author\"/>\r\n            <ShelfComponent key=\"Search\"\r\n                            title=\"Search Results\"\r\n                            books={books}\r\n                            shelves={bookShelves}\r\n                            moveBook={(book, destination) => moveBook(book, destination)}\r\n            />\r\n            <Link to=\"/\" className=\"backButton\" onClick={()=>(search(\"\"))}>\r\n                <i title=\"Back\" className=\"fa fa-arrow-left\"/>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nSearchComponent.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    search: PropTypes.func.isRequired,\r\n    bookShelves: PropTypes.object.isRequired,\r\n    moveBook: PropTypes.func.isRequired,\r\n};\r\n","import React, {Component} from 'react';\r\nimport {BooksService} from \"../../services\";\r\nimport {HomeComponent, SearchComponent} from \"../../views\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\n\r\nexport class DashboardComponent extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            books: [],\r\n            searchBooks: [],\r\n            bookShelves: {\r\n                'currentlyReading': {\r\n                    books: [],\r\n                    title: \"Currently Reading\"\r\n                },\r\n                'read': {\r\n                    books: [],\r\n                    title: \"Read\"\r\n                },\r\n                'wantToRead': {\r\n                    books: [],\r\n                    title: \"Want to Read\"\r\n                },\r\n                'none': {\r\n                    books: [],\r\n                    title: \"None\",\r\n                    hidden: true\r\n                }\r\n            }\r\n\r\n        };\r\n        this.bookService = new BooksService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadBooks();\r\n    }\r\n\r\n\r\n    loadBooks() {\r\n        const {bookShelves, searchBooks} = this.state;\r\n        this.bookService.getAll().then((books) => {\r\n            if (books && books.length > 0) {\r\n                Object.keys(bookShelves).map((key) => (\r\n                        bookShelves[key].books = books.filter((book) => (book.shelf === key))\r\n                    )\r\n                );\r\n            } else {\r\n                books = [];\r\n                Object.keys(bookShelves).map((key) => (\r\n                        bookShelves[key].books = []\r\n                    )\r\n                );\r\n\r\n            }\r\n            this.setState(() => ({\r\n                    books,\r\n                    searchBooks: this.addBookShelfInfo(books, searchBooks),\r\n                    bookShelves\r\n                })\r\n            );\r\n        });\r\n    }\r\n\r\n    moveBook(book, destination) {\r\n        if (!(book && destination)) return;\r\n        this.bookService.update(book, destination).then(() => (this.loadBooks()));\r\n    }\r\n\r\n    addBookShelfInfo(books, searchBooks) {\r\n        for (let searchBook of searchBooks) {\r\n            searchBook.shelf = \"none\";\r\n        }\r\n        for (let book of books) {\r\n            for (let searchBook of searchBooks) {\r\n                if (book.id === searchBook.id) {\r\n                    searchBook.shelf = book.shelf;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return searchBooks;\r\n    }\r\n\r\n    searchBook(query) {\r\n        if (!query) {\r\n            this.setState(() => ({\r\n                searchBooks: [],\r\n            }));\r\n            return;\r\n        }\r\n        this.bookService.search(query).then((searchBooks) => {\r\n            const {books} = this.state;\r\n            this.setState(() => ({\r\n                    searchBooks: searchBooks && searchBooks.length ? this.addBookShelfInfo(books, searchBooks) : [],\r\n                })\r\n            )\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"dashboard\">\r\n                <HashRouter basename='/'>\r\n                    <Route exact path='/search' render={() => {\r\n                        const {searchBooks, bookShelves} = this.state;\r\n                        return (<SearchComponent\r\n                            books={searchBooks}\r\n                            bookShelves={bookShelves}\r\n                            search={this.searchBook.bind(this)}\r\n                            moveBook={this.moveBook.bind(this)}\r\n                        />)\r\n                    }}>\r\n                    </Route>\r\n                    <Route exact path='/' render={() => {\r\n                        const {bookShelves} = this.state;\r\n                        return (<HomeComponent\r\n                            bookShelves={bookShelves}\r\n                            moveBook={this.moveBook.bind(this)}\r\n                        />)\r\n                    }}>\r\n                    </Route>\r\n                </HashRouter>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nexport const FooterComponent = () => {\r\n    return (\r\n        <div>\r\n            <footer className=\"main-footer\">\r\n                <span className=\"copy-right\">\r\n                    copyright © 2020 all rights reserved by\r\n                    <Link href=\"https://www.seanroshan.com\" target=\"_blank\" className=\"copy-right-link\">Sean Roshan</Link>\r\n                </span>\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        maxWidth: 400,\r\n        maxHeight: 600\r\n    }\r\n}));\r\n\r\nexport const CardComponent = (props) => {\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const classes = useStyles();\r\n\r\n    const {book, moveBook, shelves} = props;\r\n    const {title, authors} = book;\r\n    const imageLink = book && book.imageLinks && book.imageLinks.thumbnail ?\r\n        book.imageLinks.thumbnail : \"https://www.southtabor.com/newsite/wp-content/themes/consultix/images/no-image-found-360x250.png\";\r\n    const subTitle = \"By \" + (authors && authors.length ? authors.join(\", \") : \"unknown author\");\r\n\r\n    const options = Object.keys(shelves).filter((key) => (key !== book.shelf)).map((key) => ({\r\n        key,\r\n        title: shelves[key].title\r\n    }));\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleMove = (option) => {\r\n        moveBook(option);\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                action={\r\n                    <IconButton aria-label=\"actions\" onClick={handleClick}\r\n                                disabled={!options.length}><MoreVertIcon/></IconButton>\r\n                }\r\n                title={title}\r\n                titleTypographyProps={{variant: 'h6'}}\r\n                subheader={subTitle}\r\n                subheaderTypographyProps={{variant: 'subtitle2'}}\r\n            />\r\n            <Menu\r\n                id=\"fade-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                onClose={handleClose}\r\n                TransitionComponent={Fade}\r\n            >\r\n                <MenuItem key=\"moveTo\" selected disabled>\r\n                    Move to\r\n                </MenuItem>\r\n                {options.map((option) => (\r\n                    <MenuItem key={option.key} onClick={() => handleMove(option.key)}>\r\n                        {option.title}\r\n                    </MenuItem>\r\n                ))}\r\n            </Menu>\r\n            <CardMedia\r\n                className=\"book-image\"\r\n                component=\"img\"\r\n                src={imageLink}\r\n                title={title}\r\n            />\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nCardComponent.propTypes = {\r\n    book: PropTypes.object.isRequired,\r\n    moveBook: PropTypes.func.isRequired,\r\n    shelves: PropTypes.object.isRequired\r\n};\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {CardComponent} from \"..\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: \"50px\",\r\n    },\r\n\r\n    expanded: {\r\n        paddingTop: \"20px\",\r\n        minHeight: \"600px\"\r\n    },\r\n}));\r\n\r\nexport const ShelfComponent = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {title, books, moveBook, shelves} = props;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ExpansionPanel defaultExpanded>\r\n                <ExpansionPanelSummary\r\n                    expandIcon={title ?<ExpandMoreIcon/> : \"\"}\r\n                    aria-controls={title}\r\n                    id={title + \"-shelf\"}\r\n                >\r\n                    <Typography variant={'h4'}>{title}</Typography>\r\n                </ExpansionPanelSummary>\r\n                <Typography variant={\"h6\"} style={{textAlign: \"center\"}} hidden={books && books.length} elevation={3}>NO CONTENT</Typography>\r\n                <ExpansionPanelDetails className={classes.expanded}>\r\n                    <Grid className=\"item\" container spacing={4}>\r\n                        {books.map((book) => (\r\n                            <Grid key={book.id} item xs={12} sm={6} md={4} lg={3} xl={4}>\r\n                                <CardComponent\r\n                                    shelves={shelves}\r\n                                    book={book}\r\n                                    moveBook={(destination) => moveBook(book, destination)}\r\n                                />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </div>\r\n    );\r\n};\r\n\r\nShelfComponent.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    moveBook: PropTypes.func.isRequired,\r\n    shelves: PropTypes.object.isRequired\r\n};\r\n","import React from 'react';\nimport './styles/App.scss';\nimport Container from \"@material-ui/core/Container\";\nimport {HeaderComponent, DashboardComponent, FooterComponent} from \"./components\";\n\n\nfunction App() {\n\n    const title = \"MyReads\";\n\n    return (\n        <Container className=\"app\" style={{paddingLeft: 0, paddingRight: 0}}>\n            <HeaderComponent title={title}/>\n            <DashboardComponent/>\n            <FooterComponent/>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}